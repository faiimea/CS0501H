#include <iostream>
#define USE_OS
using namespace std;


class error : public std::exception {
private:
    std::string msg;
    int length;

public:
    explicit error(const char* _msg_) : msg(_msg_) { length = 1; }
    explicit error(int len, const char* _msg_) : msg(_msg_) { length = len; }
    const char* toString() {
        return msg.c_str();
    }
};

//异常类

template <class elemType>
class ArrayList
{
    friend ArrayList<elemType> operator+(ArrayList<elemType> a, ArrayList<elemType> b)
    {
        int temp;
        temp = 0;
        if (a.size() < 0)
        {
            throw error(temp, "invalid length");
        }
        if (b.size() < 0)
        {
            throw error(temp, "invalid length");
        }
        temp = a.length + b.length;
        ArrayList<elemType> TempArray(temp);
        for (int i = 0;i < a.length;++i)
        {
            TempArray.arr[i] = a.arr[i];
        }
        for (int i = a.length;i < temp;++i)
        {
            TempArray.arr[i] = b.arr[i - a.length];
        }
        return TempArray;
    }
    friend bool operator==(const ArrayList<elemType> obj1, const ArrayList<elemType> obj2)
    {
        if (!(obj1.length == obj2.length)) return false;
        for (int i = 0;i < obj1.length;++i)
        {
            if (!(obj1.arr[i] == obj2.arr[i])) return false;
        }
        return true;
    }
    friend bool operator!=(const ArrayList<elemType> obj1, const ArrayList<elemType> obj2)
    {
        if (!(obj1.length == obj2.length)) return true;
        for (int i = 0;i < obj1.length;++i)
        {
            if (!(obj1.arr[i] == obj2.arr[i])) return true;
        }
        return false;
    }
    friend ostream& operator<<(ostream& os, const ArrayList obj1)
    {
        for (int i = 0;i < obj1.length;++i) cout << obj1.arr[i] << ' ';
        return os;
    }
private:
    elemType* arr;
    int length;
public:
    ArrayList() {}
    ArrayList(elemType* Ori_Arr, int Ori_Len);
    ArrayList(int Len);
    ArrayList(const ArrayList& Ori_Arr);
    ~ArrayList() { if(arr) delete[] arr; }

    int size();
    elemType& operator[](int index);
    const elemType& operator[](int index) const;
    ArrayList<elemType>& operator=(const ArrayList& right);

};
//数组定义


template<class elemType>
ArrayList<elemType>::ArrayList(int len)
{
    if (len < 0)
    {
        throw error(len, "invalid length");
    }
    arr = new elemType[len];
    length = len;
}
//构造函数 int型

template<class elemType>
ArrayList<elemType>::ArrayList(const ArrayList& Ori_Arr)
{
    if (Ori_Arr.length < 0)
    {
        int len;
        len = 0;
        throw error(len, "invalid length");
    }
    arr = new elemType[Ori_Arr.length];
    length = Ori_Arr.length;
    for (int i = 0;i < length;++i)
    {
        int len;
        len = 0;
        arr[i] = Ori_Arr[i];
    }
}
//拷贝构造函数

template<class elemType>
ArrayList<elemType>::ArrayList(elemType* Ori_Arr, int Ori_Len)
{
    if (Ori_Len < 0)
    {
        int len;
        len = 0;
        throw error(len, "invalid length");
    }
    arr = new elemType[Ori_Len];
    length = Ori_Len;
    for (int i = 0;i < length;++i)
    {
        arr[i] = Ori_Arr[i];
    }
}
//数组构造函数

template<class elemType>
int ArrayList<elemType>::size()
{
    return length;
}
//size of array

template<class elemType>
ArrayList<elemType>& ArrayList<elemType>::operator=(const ArrayList& right)
{
    if (this == &right)  return*this;
    delete [] arr;
    length = right.length;
    arr = new elemType[length];
    for (int i = 0;i < length;++i)
    {
        arr[i] = right.arr[i];
    }
    return *this;
}

template<class elemType>
elemType& ArrayList<elemType>::operator[](int index)
{
    if (index >= length || index < 0)
    {
        int len;
        len = length;
        throw error(len, "index out of bound");
    }
    return arr[index];
}

template<class elemType>
const elemType& ArrayList<elemType>::operator[](int index) const
{
    if (index >= length || index < 0)
    {
        int len;
        len = length;
        throw error(len, "index out of bound");
    }
    return arr[index];
}
