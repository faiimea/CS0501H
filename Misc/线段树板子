#include <iostream>
using namespace std;
int n;
int m;
const int maxn = 5e5 + 5;
int ori[maxn];
struct node
{
	int l, r;
	long long int sum, lazy;
	node()
	{
		l = r = sum = lazy = 0;
	}
}a[4 * maxn + 5];

void update(int k)
{
	a[k].sum = a[k * 2].sum + a[k * 2 + 1].sum;
	return;
}

void PushDown(int p)
{
	if (a[p].lazy) {
		a[p * 2].sum += a[p].lazy * (a[p * 2].r - a[p * 2].l + 1);
		a[p * 2 + 1].sum += a[p].lazy * (a[p * 2 + 1].r - a[p * 2 + 1].l + 1);
		a[p * 2].lazy += a[p].lazy;
		a[p * 2 + 1].lazy += a[p].lazy;
		a[p].lazy = 0;
	}
	return;
}

void ChangeSegment(int k, int l, int r, int x)
{

	if (a[k].l >= l && a[k].r <= r)
	{
		a[k].sum += (a[k].r - a[k].l + 1) * x;
		a[k].lazy += x;
		return;
	}
	PushDown(k);
	int mid = (a[k].l + a[k].r) / 2;
	if (l <= mid)	ChangeSegment(k * 2, l, r, x);
	if (r > mid)	ChangeSegment(k * 2 + 1, l, r, x);
	update(k);
	return;
}


void build(int k, int l, int r)
{
	a[k].l = l;
	a[k].r = r;
	if (l == r)
	{
		a[k].sum = ori[l];
		return;
	}
	int mid = (l + r) / 2;
	build(k * 2, l, mid);
	build(k * 2 + 1, mid + 1, r);
	update(k);
	return;
}

long long query(int k, int x, int y)
{
	if (x <= a[k].l && y >= a[k].r)	return	a[k].sum;
	PushDown(k);
	int mid = (a[k].l + a[k].r) / 2;
	long long ans = 0;
	if (x <= mid)	ans += query(k * 2, x, y);
	if (y > mid)	ans += query(k * 2 + 1, x, y);
	return ans;
}

int main()
{
	cin >> n >> m;
	for (int i = 1;i <= n;++i)
		cin >> ori[i];
	int temp;
	int l, r, k, x,y;
	build(1, 1, n);
	for (int i = 0;i < m;++i)
	{
		cin >> temp;
		if (temp == 1)
		{
			cin >> l >> r >> k;
			ChangeSegment(1, l, r, k);
		}
		else
		{
			cin >> x;
			cout << query(1, x, x) << endl;
		}
	}
	return 0;
}
