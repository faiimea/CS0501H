#include <iostream>
#include <algorithm>
using namespace std;
const int maxn = 1e5 + 10;

struct e
{
	int u, v, val;
}E[maxn];
int N;
int f[maxn];
int r[maxn];
//sort，冒泡，快排
//void Sort(e[], int size)
//{
//	int i, j;
//	e tmp;
//	bool flag;
//
//}

bool cmp(e e1, e e2)
{
	if (e1.val < e2.val)	return true;
	else return false;
}

int find(int x)
{
	if (x == f[x])	return x;
	return f[x] = find(f[x]);
}

void uni(int x, int y)
{
	int fx = find(x);
	int fy = find(y);
	if (fx == fy)	return;
	else
	{
		f[fx] = fy;
		r[fy] += r[fx];
	}
}

int main()
{
	cin >> N;
	for (int i = 1;i <= maxn;++i)
	{
		f[i] = i;r[i] = 1;
	}
	for (int i = 0;i < N - 1;++i)
	{
		cin >> E[i].u;
		cin >> E[i].v;
		cin >> E[i].val;
	}
	sort(E, E + N - 1, cmp);
	long long res = 0;
	for (int i = 0;i < N - 1;++i)
	{
		int x = E[i].u;
		int y = E[i].v;
		int len = E[i].val;
		if (find(x) == find(y))	continue;
		res += (long long)(r[find(y)] * r[find(x)]) * (len + 1) - 1;
		uni(x, y);
	}
	cout << res;

}
