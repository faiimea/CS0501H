#include <iostream>
#include <algorithm>
#include <cmath>
using namespace std;
const int maxp = 501;
const int maxl = 100000;
struct e
{
	int u;
	int v;
	double val;
}E[maxl];
struct p
{
	int x;
	int y;
}P[maxp];
int s, p;
int loc[maxp][maxp];
int f[maxp];
int find(int x)
{
	if (f[x] == x)	return x;
	else return f[x] = find(f[x]);
}
void uni(int x, int y)
{
	x = find(x);y = find(y);
	if (x == y)	return;
	else f[x] = y;
}
bool cmp(e a, e b)
{
	if (a.val < b.val)	return true;
	else return false;
}

bool check(int mid)
{
	for (int i = 0;i < maxp;++i)	f[i] = i;
	int k = 0;
	int num = 0;
	for (int i = 0;i < maxl;++i)
	{
		if (num == p) break;
		if (k > s)	return false;
		int x = find(E[i].u);
		int y = find(E[i].v);
		int len = E[i].val;
		if (x == y)	continue;
		uni(x, y);
		num++;
		if (len > mid)
		{
			k++;
		}
		if (num == p - 1) break;
	}
	if (k >= s)	return false;
	else return true;
}
int main()
{
	double res = 1 << 30;
	for (int i = 0;i < maxp;++i)	f[i] = i;
	cin >> s >> p;
	for (int i = 0;i < p;++i)
	{
		cin >> P[i].x >> P[i].y;
	}
	int tot = 0;
	for (int i = 0;i < p;++i)
	{
		for (int j = i + 1;j < p;++j)
		{
			E[tot].u = i;
			E[tot].v = j;
			E[tot].val = sqrt((P[i].x - P[j].x) * (P[i].x - P[j].x) + (P[i].y - P[j].y) * (P[i].y - P[j].y)) * 10000;
			tot++;
		}
	}
	sort(E, E + tot, cmp);
	int l = 0, r = 1 << 30;
	while (l <= r)
	{
		double mid = (l + r) / 2;
		if (check(mid))
		{
			r = mid - 1;
			res = mid;
		}
		else l = mid + 1;
	}
	res /= 10000;
	printf("%.2lf", res);
	return 0;
}
