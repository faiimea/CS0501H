#include <iostream>
using namespace std;
const int maxn = 32e6;
static int Trie[maxn][2];
int Fir_value[100005];
int ID[maxn];
int tot = 0;
void Build(int ori,int ID_now)
{
	int tmp = 0;
	int root = 0;
	for (int i = 31;i >= 0;--i)
	{
		tmp = (ori >> i) & 1;
		if (!Trie[root][tmp]) Trie[root][tmp] = ++tot;
		ID[Trie[root][tmp]] = ID_now;
		root = Trie[root][tmp];
	}
}

void Find(int tes)
{
	int tmp = 0;
	int root = 0;
	int res_ID = 0;
	int res = 0;
	for (int i = 31;i >= 0;--i)
	{
		tmp = (tes >> i) & 1;
		if (Trie[root][tmp ^ 1])	root = Trie[root][tmp ^ 1];
		else if (Trie[root][tmp])	root = Trie[root][tmp];
		else break;
	}
	res_ID = ID[root];
	res = Fir_value[res_ID] ^ tes;
	cout << res << endl;
	return;
}

int main()
{
	int n, m;
	int wat = 0;
	cin >> n >> m;
	for (int i = 1;i <= n;++i)
	{
		cin >> Fir_value[i];
		Build(Fir_value[i],i);
	}
	for (int j = 0;j < m;++j)
	{
		cin >> wat;
		Find(wat);
	}
	return 0;
}
